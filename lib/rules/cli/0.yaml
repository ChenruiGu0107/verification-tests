---
:global_options:
  # these are options as seen by `oc options`
  :api_version: --api-version=<value>
  :ca: --certificate-authority=<value>
  :config: --config=<value>
  :context: --context=<value>
  :h: -h
  :help: --help
  :user: --user=<value>
  :insecure: --insecure-skip-tls-verify=<value>
  :namespace: --namespace=<value>
  :n: -n <value>
  :loglevel: --loglevel=<value>
  :log_dir: --log_dir=<value>
  :log_flush_frequency: --log_flush_frequency=<value>
  :logtostderr: --logtostderr=<value>
  :server: --server=<value>
  :stderrthreshold: --stderrthreshold=<value>
  :token: --token=<value>
:add_role_to_user:
  :cmd: oc policy add-role-to-user <role> <user_name>
:add_role_to_group:
  :cmd: oc policy add-role-to-group <role> <group_name>
:add_secret:
  :cmd: oc secrets add serviceaccount/<sa_name> secrets/<secret_name>
  :options:
    :for: --for=<value>
:annotate:
  :cmd: oc annotate
  :options:
    :resource: <value>
    :resourcename: <value>
    :keyval: <value>
    :all: --all=<value>
    :noheadersfalse: --no-headers=<value>
    :o: -o <value>
    :output: --output=<value>
    :outputversion: --output-version=<value>
    :overwrite: --overwrite=<value>
    :resourceversion: --resource-version=<value>
    :t: -t <value>
    :template: --template=<value>
:build_logs:
  :cmd: oc build-logs <build_name>
  :options:
    :follow: --follow=<value>
    :nowait: --nowait=<value>
:config:
  :cmd: oc config
  :options:
    :subcommand: <subcommand>
:config_set:
  :cmd: oc config set <prop_name> <prop_value>
:config_set_cluster:
  :cmd: oc config set-cluster <name>
  :options:
    :api_version: --api-version=<value>
    :cert: --certificate-authority=<value>
    :embed: --embed-certs=<value>
    :insecure: --insecure-skip-tls-verify=<value>
    :server: --server=<value>
:config_set_context:
  :cmd: oc config set-context <name>
  :options:
    :cluster: --cluster=<value>
    :namespace: --namespace=<value>
    :user: --user=<value>
:config_set_creds:
  :cmd: oc config set-credentials <name>
  :options:
    :cert:  --client-certificate=<value>
    :key:  --client-key=<value>
    :embed:  --embed-certs=<value>
    :password:  --password=<value>
    :token: --token=<value>
    :user:  --username=<value>
:config_use_context:
  :cmd: oc config use-context <name>
:config_unset:
  :cmd: oc config unset <prop_name>
:config_view:
  :cmd: oc config view
  :options:
    :output: --output=<value>
  :expected:
    - "apiVersion: v"
    - "kind: Config"
  :optional_properties:
    :current_context: !ruby/regexp '/^current-context: (.+)/'
:create:
  :cmd: oc create
  :options:
    :f: -f <value>
    :filename: --filename=<value>
:delete:
  :cmd: oc delete <object_type>
  :options:
    :l: -l <value>
    :all: --all
    :object_name_or_id: <value>
:deploy:
  :cmd: oc deploy <deployment_config>
  :options:
    :cancel: --cancel
    :enable_triggers: --enable-triggers
    :latest: --latest
    :retry: --retry
:describe:
  :cmd: oc describe <resource> <name>
  :options:
    :l: -l <value>
    :selector: --selector=<value>
:edit:
  :cmd: oc edit
  :options:
    :filename: --filename=<value>
    :output: --output=<value>
:env:
  :cmd: oc env
  :options:
    :resource: <value>
    :keyval: <value>
:exec:
  # reorder global_options and options to allow specifying exec command
  :cmd: oc exec <pod> <global_options> <options>
  :options:
    :c: -c <value>
    :container: --container=<value>
    :stdin: --stdin=<value>
    :tty: --tty=<value>
    :t: -t
    :i: -i
    :oc_opts_end: --
    :exec_command: <value>
    :exec_command_arg: <value>
:exec_raw_oc_cmd_for_neg_tests:   # used for negative testing in which we want to deviate from yaml
  :cmd: oc
  :options:
    :arg: <value>
    :test_do_not_use: <value>
:export:
  :cmd: oc export
  :options:
    :resource: <value>
    :name: <value>
    :filename: --filename=<value>
    :output_format: --output=<value>
    :all: --all=<value>
    :f: -f <value>
    :o: -o <value>
    :l: -l <value>
    :t: -t <value>
    :as_template: --as-template=<value>
    :exact: --exact=<value>
    :output_version: --output-version=<value>
:expose:
  :cmd: oc expose <resource> <resource_name>
  :options:
    :route_port: --port=<value>
    :route_protocol: --protocol=<value>
    :target_port: --target-port=<value>
    :route_name: --name=<value>
    :route_type: --type=<value>
    :output: --output=<value>
    :o: -o <value>
:get:
  :cmd: oc get <resource>
  :options:
    :resource_name: <value>
    :output: --output=<value>
    :no_headers: --no-headers=<value>
    :o: -o <value>
    :l: -l <value>
    :w: --watch=<value>
:help:
  :cmd: oc <help_word>
  :options:
    :command: <value>
:import_image:
  :cmd: oc import-image
  :options:
    :image_name: <value>
:login:
  :cmd: oc login
  :options:
    :u: -u <value>
    :p: -p <value>
    :username: --username=<value>
    :password: --password=<value>
    :token: --token=<value>
  :optional_properties:
    :username: !ruby/regexp '/ogged into ".+?" as "(.+?)"/'
  :expected:
    # strange, sometimes "Already logged into..." is printed to console, and
    #   sometimes when run multiple times - not (oc v3.0.0.0)
    #   e.g. run multiple times `oc login --username=joe`
    - !ruby/regexp '/Login successful.|ogged into|sing project/'
:logout:
  :cmd: oc logout
  :expected:
    - !ruby/regexp '/Logged ".+" out on/'
:logs:
  :cmd: oc logs <pod_name>
  :options:
    :c: -c <value>
    :f: -f
    :p: -p
:new_app:
  :cmd: oc new-app
  :options:
    :app_repo: <value>
    :labels: --labels=<value>
    :l: -l <value>
    :name: --name=<value>
    :strategy: --strategy=<value>
    :template: --template=<value>
    :output: --output=<value>
    :param: --param=<value>
    :insecure_registry: --insecure-registry=<value>
    :image_stream: --image-stream=<value>
    :image: --image=<value>
    :group: --group=<value>
    :file: --file=<value>
    :env: --env=<value>
    :docker_image: --docker-image=<value>
    :context_dir: --context-dir=<value>
    :code: --code=<value>
    :search: --search=<value>
:new_build:
  :cmd: oc new-build
  :options:
    :app_repo: <value>
    :code: --code=<value>
    :docker_image: --docker-image=<value>
    :image: --image=<value>
    :l: -l <value>
    :name: --name=<value>
    :output: --output=<value>
    :strategy: --strategy=<value>
    :template: --template=<value>
:new_dockercfg:
  :cmd: oc secrets new-dockercfg <secret_name>
  :options:
    :docker_email: --docker-email=<value>
    :docker_password: --docker-password=<value>
    :docker_server: --docker-server=<value>
    :docker_username: --docker-username=<value>
    :no_headers: --no-headers=<value>
    :output: --output=<value>  # One of: json|yaml|template|templatefile|wide
    :output_version: --output-version=<value>
    :template: --template=<value>
:new_project:
  :cmd: oc new-project <project_name>
  #:expected:
  #  - Created project <project_name>
  :options:
    :display_name: --display-name=<value>
    :description: --description=<value>
    :admin: --admin=<value>
:new_secret:
  :cmd: oc secrets new <secret_name> <credential_file>
  :options:
    :no_headers: --no-headers=<value>
    :output: --output=<value>  # One of: json|yaml|template|templatefile|wide
    :output_version: --output-version=<value>
    :template: --template=<value>
    :type: --type=<value>
    :quiet: --quiet=<value>

:port_forward:
  :cmd: oc port-forward
  :options:
    :pod: <value>
    :local_port: <value>
    :remote_port: <value>
:process:
  :cmd: oc process
  :options:
    :f: -f <value>
    :template: <value>
    :v: --value=<value>
:project:
  :cmd: oc project
  :options:
    :project_name: <value>
:remove_role_from_user:
  :cmd: oc policy remove-role-from-user <role> <user_name>
:remove_role_from_group:
  :cmd: oc policy remove-role-from-group <role> <group_name>
:replace:
  :cmd: oc replace
  :options:
    :f: -f <value>
    :force: --force
    :output: --output=<value>
:rollback:
  :cmd: oc rollback <deployment_name>
  :options:
    :change_scaling_settings: --change-scaling-settings
    :change_strategy: --change-strategy
    :change_triggers: --change-triggers
    :dry_run: --dry-run
    :output: --output=<value>
    :template: --template=<value>
    :to_version: --to-version=<value>
:rsh:
  :cmd: oc rsh
  :options:
    :app_name: <value>
:scale:
  :cmd: oc scale <resource> <name>
  :options:
    :current_replicas: --current-replicas=<value>
    :replicas:  --replicas=<value>
    :resource_ver: --resource-version=<value>
:secrets:
  :cmd: oc secrets <action>
  :options:
    :name: <value>
    :source: <value>
    :serviceaccount: <value>
    :secrets_name: <value>
    :for: --for=<value>
:start_build:
  :cmd: oc start-build <buildconfig>
  :options:
    :follow: --follow
    :from_build: --from-build=<value>
    :from_webhook: --from-webhook=<value>
    :git_repo: --git-repository=<value>
:status:
  :cmd: oc status
:types:
  :cmd: oc types
:version:
  :cmd: oc version
  :expected:
    - oc v
    - kubernetes v
  :properties:
    :oc_version: !ruby/regexp '/^oc v(.+)$/'
    :kubernetes_version: !ruby/regexp '/kubernetes v(.+)$/'
:volume:
  :cmd: oc volume <resource>
  :options:
    :all: --all=<value>
    :selector: --selector='<value>'
:whoami:
  :cmd: oc whoami
  :options:
    :invalid_option:  -b   # for negative testing

#################### admin commands section

:oadm_add_cluster_role_to_user:
  :cmd: oadm policy add-cluster-role-to-user <role_name> <user_name>
:oadm_add_cluster_role_to_group:
  :cmd: oadm policy add-cluster-role-to-group <role_name> <group_name>
:oadm_add_role_to_user:
  :cmd: oadm policy add-role-to-user <role_name> <user_name>
  :options:
    :role_namespace: --role-namespace=<value>
:oadm_add_role_to_group:
  :cmd: oadm policy add-role-to-group <role_name> <group_name>
:oadm_new_project:
  :cmd: oadm new-project <project_name>
  :expected:
    - Created project <project_name>
  :options:
    :display_name: --display-name=<value>
    :description: --description=<value>
    :admin: --admin=<value>
:oadm_remove_cluster_role_from_user:
  :cmd: oadm policy remove-cluster-role-from-user <role_name> <user_name>
:oadm_remove_cluster_role_from_group:
  :cmd: oadm policy remove-cluster-role-from-group <role_name> <group_name>
:oadm_remove_role_from_user:
  :cmd: oadm policy remove-role-from-user <role_name> <user_name>
:oadm_remove_role_from_group:
  :cmd: oadm policy remove-role-from-group <role_name> <group_name>
:oadm_version:
  :cmd: oadm version
  :expected:
    - oadm v
    - kubernetes v
  :properties:
    :oadm_version: !ruby/regexp '/^oadm v(.+)$/'
    :kubernetes_version: !ruby/regexp '/kubernetes v(.+)$/'
