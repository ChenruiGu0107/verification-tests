--- # check browse/builds page
check_buildconfig_edit_page_disabled:
  elements:
  - selector:
      xpath: //button[contains(.,"Save") and @disabled]
  - selector:
      xpath: //fieldset[@disabled]
check_buildconfig_list_page:
  action: goto_builds_page
  element:
    selector:
      xpath: //table[descendant::th[text()="Name"]]
check_build_log_content:
  element:
    selector:
      xpath: //td[contains(.,'<build_log_context>')]
    timeout: 300
check_build_log_tab:
  action: goto_one_build_page
  action: click_on_logs_tab
  elements:
    - selector:
        xpath: //div[@class='log-status']//span[contains(.,'<build_status_name>')]
      timeout: 300
check_one_buildconfig_page:
  action: goto_one_buildconfig_page
  action: click_on_history_tab
check_triggers_section_exists:
  element:
    selector:
      xpath: //h3[contains(.,'Triggers')]
show_annotations_in_bc_page:
  action: click_show_annotations
  elements:
  - selector:
      xpath: //td[contains(text(),"openshift.io/")]
  action: click_hide_annotations
check_one_buildconfig_page_with_check_config:
  action: goto_buildconfig_configuration_tab
  action: show_annotations_in_bc_page
  action: check_buildconfig_source_repo
  action: check_bc_generic_webhook_trigger
  # GitHub webhook URL
  action: check_bc_github_webhook_trigger
  elements:
  # Manual (CLI):
  - selector:
      xpath: //dt[contains(.,'Manual (CLI):')]
  - selector:
      xpath: //div/input[contains(@value,"oc start-build") and @readonly]
    type: input
check_one_buildconfig_page_with_build_op:
  action: check_one_buildconfig_page_with_check_config
  elements:
  - selector:
      text: Start Build
      class: btn-default
    type: button
    op: click
  - selector:
      xpath: //span[contains(., 'successfully queued')]
check_one_build_inside_bc_page:
  # <bc_and_build_name> contains two "/",e.g. bc/build/
  action: goto_one_build_page
  action: click_show_annotations
check_rebuild_button:
  elements:
  - selector:
      xpath: //button[@ng-click="cloneBuild()" and text()="Rebuild"]
click_to_show_advanced_options:
  elements:
  - selector:
      xpath: //a[contains(.,"Show advanced option")]
    op: click
click_to_show_source_advanced_options:
  elements:
  - selector:
      xpath: //div[@id="source-url-help"]//a[contains(.,"advanced option")]
    op: click
cancel_build_from_pending_status:
  action: check_one_build_inside_bc_page
  elements:
  #- selector:
  #    xpath: //span[@ng-switch-when='New']
  #  optional: true
  - selector:
      xpath: //span[@ng-switch-when='Pending']
    optional: true
  - selector:
      text: Cancel Build
      class: btn-default
    op: click
    type: button
  - selector:
      text: Rebuild
      class: btn-default
    type: button
cancel_build_from_running_status:
  action: check_one_build_inside_bc_page
  elements:
  - selector:
      xpath: //span[@ng-switch-when='Running']
  - selector:
      text: Cancel Build
      class: btn-default
    op: click
    type: button
  - selector:
      text: Rebuild
      class: btn-default
    type: button
goto_builds_page:
  url: /console/project/<project_name>/browse/builds
goto_one_buildconfig_page:
  url: /console/project/<project_name>/browse/builds/<bc_name>
goto_one_build_page:
  url: /console/project/<project_name>/browse/builds/<bc_and_build_name>
goto_buildconfig_configuration_tab:
  action: goto_one_buildconfig_page
  action: click_on_configuration_tab
  action: check_triggers_section_exists
start_build_base_on_buildconfig:
  action: check_one_buildconfig_page
  action: click_start_build_button
click_start_build_button:
  action: close_all_toast_notifications
  element:
    selector:
      text: Start Build
      class: btn-default
    type: button
    op: click
click_to_goto_edit_bc_page:
  action: goto_one_buildconfig_page
  action: click_to_goto_edit_page
wait_latest_build_to_status:
  action: goto_one_buildconfig_page
  element:
    selector:
      xpath: //span[@ng-switch='latestBuild.status.phase']/span[contains(.,'<build_status>')]
    timeout: 600
check_buildconfig_environment:
  action: goto_buildconfig_environment_tab
  action: check_environment_tab
check_build_environment:
  action: goto_build_environment_tab
  action: check_environment_tab
check_environment_tab:
  action: check_environment_variable
check_environment_variable:
  element:
    selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
  - command: |
        var key = "<env_var_key>",
            value = "<env_var_value>",
            rows = document.querySelectorAll('div[class~=key-value-editor-entry]');
        for (var i =0; i< rows.length; i++) {
          let inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input');
          if (inputs.length == 2) {
            if (inputs[0].value == key && inputs[1].value == value)
              return true;
          } else if (inputs.length == 1) {
            let div = rows[i].querySelectorAll('div[class~=key-value-editor-input] div div div');
            if (inputs[0].value == key && div.length == 1 && div[0].textContent.replace(/(\n+)/gm," ").includes(value))
              return true;
          }
        }
        return false;
    expect_result: true
check_env_var_missing:
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
    - command: |
            var key = "<env_var_key>",
                value = "<env_var_value>",
                rows = document.querySelectorAll('div[class~=key-value-editor-entry]'),
                inputs = [];
            for (var i =0; i< rows.length; i++) {
              inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input');
              if (inputs.length == 2 && inputs[0].value == key && inputs[1].value == value) {
                return false;
              }
            }
            return true;
      expect_result: true
check_configmap_or_secret_env_var:
  element:
    selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
  - command: |
        var key = "<env_var_key>",
            resource = "<resource_name>",
            resource_key = "<resource_key>",
            rows = document.querySelectorAll('div[class~=key-value-editor-entry]');
        for (var i =0; i< rows.length; i++) {
          let cells = rows[i].querySelectorAll('div[class~=key-value-editor-input]');
          if (cells.length == 2) {
            if (cells[0].getElementsByTagName("input")[0].value == key) {
              let dd_menu_values = cells[1].querySelectorAll('div[class~=ui-select-match] span[class~=ui-select-match-text] span');
              if (dd_menu_values[0].innerText.includes(resource) && dd_menu_values[1].innerText.includes(resource_key)) {
                return true;
              }
            }
          }
        }
        return false;
    expect_result: true
check_empty_buildconfig_environment:
  action: goto_buildconfig_environment_tab
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-entry')]
  scripts:
    - command: |
             var rows = document.querySelectorAll('div[class~=key-value-editor-entry]')
             for (var i =0; i< rows.length; i++) {
                 var inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input')
                     if (inputs.length == 2 && (inputs[0].value != "" || inputs[1].value != "")) {
                           return false
                               }
             }
             return true
      expect_result: true
check_buildconfig_dockerfile_config:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Dockerfile')]/following-sibling::div[contains(.,'<docker_file_content>')]
check_build_strategy:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Build Strategy')]/following-sibling::dd[contains(.,'<build_strategy>')]
check_build_trigger:
  action: goto_one_build_page
  elements:
  - selector:
      xpath: //dt[contains(.,'Triggered By:')]/following-sibling::dd[contains(normalize-space(),'<trigger_info>')]
check_build_hidden_secret:
  action: goto_one_build_page
  elements:
  - selector:
      xpath: //dt[contains(.,'Triggered By:')]/following-sibling::dd//a[contains(.,'Show Obfuscated Secret')]
    op: click
  - selector:
      xpath: //dt[contains(.,'Triggered By:')]/following-sibling::dd[contains(.,'<hidden_text>')]
goto_buildconfig_environment_tab:
  action: goto_one_buildconfig_page
  action: goto_environment_tab
goto_build_environment_tab:
  action: goto_one_build_page
  action: goto_environment_tab
goto_environment_tab:
  action: click_on_environment_tab
  elements:
  - selector:
      xpath: //environment
    optional: true
delete_env_var:
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
    - command: |
             var key = "<env_var_key>"
             var rows = document.querySelectorAll('div[class~=key-value-editor-entry]')
             for (var i =0; i< rows.length; i++) {
                 var inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input')
                 if (inputs.length==2 && inputs[0].value == key) {
                     rows[i].querySelector(".key-value-editor-buttons a").click()
                     return true
                 }
             }
             return false
      expect_result: true
count_buildconfig_image_paths:
  action: goto_buildconfig_configuration_tab
  scripts:
  - command: return document.getElementsByClassName("is-item-description").length == <image_path_count>
    expect_result: true
check_buildconfig_source_repo:
  action: goto_buildconfig_configuration_tab
  action: check_bc_source_repo
check_bc_source_repo:
  element:
    selector:
      xpath: //dt[contains(.,'Source Repo')]/following::span[contains(.,'<source_repo_url>')]
check_none_buildconfig_source_repo:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Source')]/following::i[contains(.,"none")]
check_bc_succesfully_updated_message:
  params:
    resource: Build config
    name: <bc_name>
  action: check_resource_succesfully_updated_message
change_bc_source_repo_url:
  action: check_buildconfig_edit_page_loaded_completely
  action: change_source_repo_url
add_env_vars_on_buildconfig_edit_page:
  action: check_buildconfig_edit_page_loaded_completely
  action: add_env_vars
add_env_var_using_configmap_or_secret:
  action: click_add_env_var_using_configmap_or_secret
  action: add_env_var_key
  action: select_env_var_resource
  action: select_env_var_key
click_add_env_var_using_configmap_or_secret:
  element:
    selector:
      xpath: //a[normalize-space(text())='Add Value from Config Map or Secret']
    op: click
select_env_var_resource:
  elements:
  - selector:
      xpath: (//div[@placeholder='Select a resource'])[last()]
    op: click
  - selector:
      xpath: //ul//div[span/span[normalize-space(text())='<resource_name>']]
    op: click
select_env_var_key:
  elements:
  - selector:
      xpath: (//div[@placeholder='Select key'])[last()]
    op: click
  - selector:
      xpath: //ul//div[span/span[normalize-space(text())='<resource_key>']]
    op: click
add_env_vars:
  action: add_new_env_var
  action: add_env_var_key
  action: add_env_var_value
add_new_env_var:
  element:
    selector:
      xpath: //a[normalize-space(text())='Add Value']
    op: click
add_env_var_key:
  element:
    selector:
      xpath: //div[@ng-repeat="entry in entries"][count(//div[@ng-repeat="entry in entries"])]/div[1]/input
    op: send_keys <env_var_key>
add_env_var_value:
  element:
    selector:
      xpath: //div[@ng-repeat="entry in entries"][count(//div[@ng-repeat="entry in entries"])]/div[2]//input
    op: send_keys <env_var_value>
check_invalid_url_warn_message:
  elements:
  - selector:
      xpath: //span[@class='help-block' and contains(.,'not be a valid Git URL')]
check_outdated_bc_warn_message:
  elements:
  - selector:
      xpath: //span[contains(.,'object has been modified')]
check_deleted_bc_warn_message:
  element:
    selector:
      xpath: //toast-notifications//span[contains(.,'This build configuration has been deleted')]
check_build_has_started_message:
  element:
    selector:
      xpath: //toast-notifications//span[contains(.,'successfully queued')]
check_bc_builder_image_stream:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Builder Image')]/following-sibling::dd[contains(.,'<builder_image_streams>')]
check_bc_output:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Output To')]/following-sibling::dd[contains(.,'<bc_output>')]
check_github_webhook_trigger:
  element:
    selector:
      xpath: //input[contains(@value,'<github_webhook_trigger>') and @readonly]
check_generic_webhook_trigger:
  element:
    selector:
      xpath: //input[contains(@value,'<generic_webhook_trigger>') and @readonly]
check_bc_github_webhook_trigger:
  action: goto_buildconfig_configuration_tab
  action: check_github_webhook_trigger
check_bc_generic_webhook_trigger:
  action: goto_buildconfig_configuration_tab
  action: check_generic_webhook_trigger
check_bc_image_change_trigger:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'New Image For')]/following-sibling::dd[contains(.,'<image_change_trigger>')]
check_bc_config_change_trigger:
  action: goto_buildconfig_configuration_tab
  action: check_bc_config_change_trigger_value
check_bc_config_change_trigger_exist:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dt[contains(.,'Configchange for')]
check_bc_config_change_trigger_value:
  element:
    selector:
      xpath: //dt[contains(.,'Config Change For')]/following-sibling::dd[contains(.,'<config_change_trigger>')]
edit_env_var_value:
  elements:
  - selector: &env_var_value_field |
        var id = null
        var p = new RegExp("<env_variable_name>");
        var el = document.getElementsByTagName("input");
        for (var i=0; i<el.length; i++) {
          if (p.test(el[i].value)) {
            id = el[i].id;
            break;
          }
        }
        if (id == null) return null;
        id = id.replace("-key-", "-value-");
        return document.getElementById(id);
    type: js
    op: clear
  - selector: *env_var_value_field
    type: js
    op: send_keys <new_env_value>
reorder_environment_variable:
  scripts:
  - file: jquery.simulate.drag-sortable
    expect_result: true
  - command: |
        var id = null,
            p = new RegExp("<env_variable_name>"),
            el = document.getElementsByTagName("input"),
            div_el = {},
            offset = parseInt("<offset>");
            move = ("<direction>" == "down") ? offset : -1*offset;
        for (var i=0; i<el.length; i++) {
          if (p.test(el[i].value)) {
            res_el = el[i];
            break;
          }
        }
        if (res_el.id == null) return null;
        div_el = res_el.parentElement.parentElement;
        $(div_el).simulateDragSortable({ move: move, handle: ".as-sortable-item-handle"});
        return true;
    expect_result: true
check_environment_variables_order:
  scripts:
  - command: |
        var patterns = "<env_vars_order>".split(",").map(function(v){return new RegExp(v);}),
            els = document.getElementsByTagName("input").filter(function(el){return el.id.startsWith("key-value-editor-key");})
        for (var i=0; i<els.length; i++) {
          if (patterns[0].test(els[i].value)) {
            if (patterns.length == 1) {
              return true;
            }
            patterns.shift()
          }
        }
        return false;
    expect_result: true
check_bc_environment_variables_order:
  action: goto_buildconfig_environment_tab
  action: check_environment_variables_order
save_updated_env_value: {}
change_env_vars:
  action: edit_env_var_value
  action: save_updated_env_value
check_bc_source_ref:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dd[@ng-if="buildConfig.spec.source.git.ref" and contains(.,'<source_ref>')]
check_bc_source_context_dir:
  action: goto_buildconfig_configuration_tab
  elements:
  - selector:
      xpath: //dd[@ng-if="buildConfig.spec.source.contextDir" and contains(.,'<source_context_dir>')]
check_start_build_button_not_disabled:
  elements:
  - selector:
      xpath: //button[@ng-click="startBuild()" and not(@disabled)]
check_bc_runpolicy:
  action: goto_buildconfig_configuration_tab
  action: check_runPolicy
check_runPolicy:
  elements:
  - selector:
      xpath: //div[@class="run-policy"]//dd[contains(., "<run_policy>")]
check_one_build_status:
  elements:
  - selector:
      xpath:  //a[contains(., "#<number>")]/ancestor::tr/td[contains(., "<status>")]
    timeout: 270
