###############################################################################
#                             USAGE INSTRUCTIONS                              #
###############################################################################
# adding private data in layers. It is important to squash resulting image
# to avoid data leak through the untagged layers that still can be accessed.
# This can be accomplished by using one of several tools. First,
# https://github.com/goldmann/docker-squash, and also the imagebuilder tool:
# https://github.com/openshift/imagebuilder This tool squashes layers by
# default (but leaving base-image layers in place). As it takes a directory as
# the build argument, and following the install procedures, sample usage would
# look like:
# $HOME/go/bin/imagebuilder .
# where the '.' folder contains a Dockerfile.
#
# To use this particular Dockerfile, copy this to the top-level cucushift dir,
# change the name to remove the .centos extension, and run imagebuilder.
#
# At this point, the image can be tagged and pushed to an internal repository
# $ sudo docker tag myimage <registry>/project/name:tag
# $ sudo docker push <registry>/project/name
###############################################################################
# The standard name for this image is aosqe/cucushift-base

FROM openshift/jenkins-slave-base-centos7

LABEL vendor="Red Hat inc."
LABEL maintainer="AOS QE Team"

ADD . $HOME/cucushift
RUN [ -d $HOME/cucushift/private/config/ca ] && \
    ( cd $HOME/cucushift/private/config/ca && \
    cp *.pem /etc/pki/ca-trust/source/anchors/ && \
    update-ca-trust extract || \
    exit 1 ) || :

RUN set -x && \
    SCL_BASE_PKGS="centos-release-scl scl-utils-build" && \
    INSTALL_PKGS="rh-ruby23 rh-ror42-rubygem-nokogiri rh-ruby23-ruby-devel rh-git29 bsdtar" && \
    yum -y update && \
    yum install -y --enablerepo=centosplus $SCL_BASE_PKGS && \
    yum install -y --enablerepo=centosplus $INSTALL_PKGS && \
    yum install -y https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
    # temporarily install firefox 60 from rpm, can be removed once package becomes released officially
    yum install -y http://pulp.dist.prod.ext.phx2.redhat.com/content/dist/rhel/server/7/7Server/x86_64/os/Packages/firefox-60.1.0-4.el7_5.x86_64.rpm && \
    CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com" && \
    CHROMEDRIVER_VERSION=`curl -sSL "$CHROMEDRIVER_URL/LATEST_RELEASE"` && \
    curl -sSL "$CHROMEDRIVER_URL/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"  | bsdtar xvf - -C /usr/local/bin && \
    GECKODRIVER_DOWNLOAD_URL="$(curl -sSL https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep -E 'browser_download_url.*linux64' | sed -E 's/.*(https[^"]*).*/\1/')" && \
    curl -sSL "$GECKODRIVER_DOWNLOAD_URL" | bsdtar -xvf - -C /usr/local/bin && \
    chmod +x /usr/local/bin/chromedriver /usr/local/bin/geckodriver && \
    rpm -V $INSTALL_PKGS $SCL_BASE_PKGS && \
    yum clean all -y && \
    rm -rf /var/cache/yum && \
    mkdir -p $HOME/bin

RUN scl enable rh-ror42 "$HOME/cucushift/tools/install_os_deps.sh && yum clean all -y && rm -rf /var/cache/yum"
RUN scl enable rh-ror42 $HOME/cucushift/tools/hack_bundle.rb

# -k is a bad option, put certificated under private/config/ca instead
# be mindful image will be visible if image is made public which is a mild
#   security concern because of exposing VPN details
# RUN sed -i -e 's/^\s\+curl\s/  curl -Sk /' /usr/local/bin/run-jnlp-client

RUN rm -rf $HOME/cucushift

RUN dbus-uuidgen > /etc/machine-id # e.g. needed for firefox
RUN chown -R 1001:0 $HOME && chmod -R g+rw $HOME /etc/machine-id
# allow yum/dnf; but probably fakeroot would be needed and still some install
# scripts may fail because of lack of real root
#RUN dirs="/usr /etc /var /home /opt" && \
#    chown -R 1001:0 $dirs && chmod -R g+rw $dirs

# have sudo working just in case
RUN echo -e '#!/bin/bash\nexec "$@"' > /usr/local/bin/sudo && chmod 755 /usr/local/bin/sudo

USER 1001

# we need ruby and some gems from ror
ENTRYPOINT ["/usr/bin/scl", "enable", "rh-git29", "rh-ror42", "--", "/usr/local/bin/run-jnlp-client"]
